<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: note | easypi's blog]]></title>
  <link href="http://easypi.github.com/blog/categories/note/atom.xml" rel="self"/>
  <link href="http://easypi.github.com/"/>
  <updated>2013-01-14T20:25:28+08:00</updated>
  <id>http://easypi.github.com/</id>
  <author>
    <name><![CDATA[厚之成]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JaveEE学习之Servlet技术]]></title>
    <link href="http://easypi.github.com/blog/2013/01/14/javaEE-learning-servlet/"/>
    <updated>2013-01-14T20:17:00+08:00</updated>
    <id>http://easypi.github.com/blog/2013/01/14/javaEE-learning-servlet</id>
    <content type="html"><![CDATA[<p>JSP的本质就是Servlet，编写JSP将其放入web容器中，web容器将JSP编译为Servlet。 由于作为表现层技术使用时，直接使用Servlet的开发效率低下，因此一般使用如JSP等的表现层技术实现。在MVC规范中，Servlet通常被当作控制器使用，虽然还有很多其他MVC的框架可用，但Servlet作为底层实现，对学习JavaEE技术，了解技术原理是有意义的。本文给出一个简单的符合MVC规范的web应用例子，并使用Servlet作为其中的控制器来学习Servlet的相关技术。</p>

<!-- more -->


<h2>Servlet类介绍</h2>

<p>Servlet类是一个继承自<code>HttpServlet</code>的特殊类，可以用来响应用户的请求。在编写自己的Servlet时最常使用的方法是<code>service()</code>方法，该方法处理客户端的请求。因此，一个Servlet类的典型结构为：</p>

<pre><code>//使用@WebServlet Annotation 配置servlet
@WebServlet(name="firstServlet", urlPatterns={"/firstServlet"})
//Servlet类定义
public class FirstServlet extends HttpServlet
{
    public void service(HttpServletRequest request,
    HttpServletResponse response) 
    throws ServletException,java.io.IOException 
    {
        //相应用户请求代码
    }
}
</code></pre>

<h2>Servlet类配置</h2>

<p>为了使Servlet响应用户请求，还需将Servlet与Web应用配置起来。配置Servlet有两种方法：在web.xml中配置和使用@WebServlet Annotation配置。使用@WebServlet Annotation直接在Java类的编辑中即可实现，不需web.xml，我认为是更好的方法，因此使用该法进行配置。在使用@WebServlet Annotation时，其常用的几个属性如下：</p>

<ul>
<li>name:                  指定该Servlet的名称</li>
<li>urlPatterns/value:     指定该Servlet要处理的url</li>
<li>initParams：           指定该Servlet的参数</li>
<li>loadOnStartup:         指定该Servlet是否为load on startup 的Servlet</li>
</ul>


<h2>Servlet类作为控制器</h2>

<p>在MVC模式中，Model通常由JavaBean来充当，用来实现业务逻辑、数据访问逻辑等; View通常由JSP来充当，用来收集用户的请求参数、将应用处理的结果和状态等返回呈现给用户等; Controller则由Servlet来充当，实现类似调度员的作用，即用户请求发送到Servlet，Servlet调用Model来处理用户请求，并将结果调用JSP呈现给用户。MVC模式通过对三者作用的分工，实现应用的解耦，方便多人协同开发同一个项目。</p>

<p>现在给出一个简单的MVC模式的应用，实现登录的验证。首先给出<code>login.jsp</code>:</p>

<pre><code>&lt;%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
&lt;title&gt;登录&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
请输入用户名和密码
&lt;!-- 登录表单，被提交至一个Servlet --&gt;
&lt;form id="login" method="post" action="login"&gt;
用户名： &lt;input type="text" name="username"/&gt; &lt;br/&gt;
密码：  &lt;input type="password" name="pass" /&gt; &lt;br/&gt;
&lt;input type="submit" value="登录" /&gt; &lt;br/&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>然后给出控制器Servlet类<code>LoginServlet.java</code>:</p>

<pre><code>import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.annotation.*;

import java.sql.*;
import java.io.*;

@WebServlet(name="login", urlPatterns={"/login"})

public class LoginServlet extends HttpServlet {

    public void service(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, java.io.IOException 
    {
            String errMsg="";
            //Servlet不输出响应到客户端，因此必须将请求转发
            RequestDispatcher rd;

            //获取请求参数    
            String username =  request.getParameter("username");
            String pass = request.getParameter("pass");
            PrintStream out = new PrintStream(response.getOutputStream());
            //out.println("name" + username);

            try {
                //Servlet 本身不处理业务逻辑，调用JavaBean处理用户请求
                DbDao dd = new DbDao("com.mysql.jdbc.Driver",
                    "jdbc:mysql://localhost:3306/javaee","root","mysql");
                //查询结果集
                ResultSet rs = dd.query("select pass from user_table"
                    + "where name = ?", username);
                if (rs.next()) {

                    //用户名和密码匹配
                    if (rs.getString("pass").equals(pass)) {
                        // 获取session对象
                        HttpSession session = request.getSession(true);
                        //设置session属性，跟踪用户会话状态
                        session.setAttribute("name", username);
                        //获取转发对象
                        rd = request.getRequestDispatcher("/welcome.jsp");
                        rd.forward(request, response);
                    }
                    else {
                        //用户名密码不匹配
                        errMsg += "您的用户名密码不符合，请重试";
                    }
                }
                else {
                    //用户名不存在时
                    errMsg += "您的用户名不存在，请先注册";
                }

            }
            catch (Exception e) {
                out.println(errMsg);
                e.printStackTrace();
            }

            //如果出错，转发到重新登录
            if (errMsg != null &amp;&amp; !errMsg.equals("")) {
                rd = request.getRequestDispatcher("/login.jsp");
                request.setAttribute("err", errMsg);
                rd.forward(request, response);
            }

        }   
}
</code></pre>

<p>最后给出Model类<code>DbDao.java</code>：</p>

<pre><code>import java.sql.*;

public class DbDao {
    private Connection conn;
    private String driver;
    private String url;
    private String username;
    private String pass;

    public DbDao() {}
    public DbDao(String driver, String url, String username, String pass) {
        this.driver = driver;
        this.url = url;
        this.username = username;
        this.pass = pass;
    }
    //各属性的setter和getter方法
    public void setDriver(String driver) {
        this.driver = driver;
    }
    public void setUrl(String url) {
        this.url = url;
    }
    public void setUsername(String username) {
        this.username=username;
    }
    public void setPass(String pass) {
        this.pass = pass;
    }
    public String getDriver() {
        return this.driver;
    }
    public String getUrl() {
        return this.url;
    }
    public String getUsername() {
        return this.username;
    }
    public String getPass() {
        return this.pass;
    }

    //获取数据库连接
    public Connection getConnection() throws Exception{
        if (conn == null) {
            Class.forName(this.driver);
            conn = DriverManager.getConnection(url, username, this.pass);
        }
        return conn;
    }
    // 插入记录
    public boolean insert(String sql, Object... args) throws Exception {
        PreparedStatement pstmt = getConnection().prepareStatement(sql);
        for (int i=0; i&lt;args.length; i++) {
            pstmt.setObject(i+1, args[i]);
        }
        if (pstmt.executeUpdate() != 1) {
            return false;
        }
        return true;
    }
    // 执行查询
    public ResultSet query(String sql, Object... args) throws Exception {
        PreparedStatement pstmt = getConnection().prepareStatement(sql);
        for (int i = 0; i &lt; args.length; i++) {
            pstmt.setObject(i+1, args[i]);
        }
        return pstmt.executeQuery();
    }
    //执行修改
    public void moify (String sql, Object... args) throws Exception {
        PreparedStatement pstmt = getConnection().prepareStatement(sql);
        for (int i = 0; i &lt; args.length; i++) {
            pstmt.setObject(i+1, args[i]);
        }
        pstmt.executeUpdate();
        pstmt.close();
    }
    //关闭数据库连接的方法
    public void closeConn() throws Exception {
        if (conn != null &amp;&amp; !conn.isClosed()) {
            conn.close();
        }
    }
}
</code></pre>

<p>至此，一个完整的MVC模式的web应用就完成了，其中JSP充当View，用来提供用户交流界面; Servlet充当控制器, 起调动作用；JavaBean充当模型，处理业务逻辑和数据逻辑。</p>

<h2>Servlet类相关</h2>

<h3>Filter</h3>

<p>Filter可以看作Servlet的加强版，它是一个处理链，典型的使用流程是：使用Filter对用户请求进行预处理，然后将请求交给Servlet进行处理，最后对服务器响应进行后处理。Filter的作用主要有以下几个方面：</p>

<ul>
<li>拦截HttpServletRequest进行预处理，可以修改请求数据，然后交给Servlet处理</li>
<li>拦截HttpServletResponse进行后处理，可以修改Servlet的处理结果，然后作为服务器的响应结果。</li>
</ul>


<p>Filter的使用和Servlet非常类似，包括定义Filter类和配置Filter两步。其中Filter类必须实现<code>javax.servlet.Filter</code>接口，主要功能在<code>doFilter()</code>函数内实现。Filter的配置也可使用@webFilter Annotation进行配置。</p>

<h3>Listener</h3>

<p>Listener完成对web应用内事件的监听和处理，从而允许当web应用内有事件发生时，可以回调事件监听器内的方法。Listener的使用与Servlet类似，分为定义Listener实现类和配置Listener两步。自定义的Listener类根据不同的web应用时间需实现不同的接口，常见的web监听器接口有以下几个：</p>

<ul>
<li>ServletContextListener: 用于监听web应用的启动和关闭</li>
<li>ServletContextAttributerListener: 用于监听ServletContext范围（application）内属性的更改</li>
<li>ServletRequestListener： 用于监听用户请求</li>
<li>ServletRequestAttributerListener: 用于监听ServletRequest范围（request）内属性的更改</li>
<li>ServletSessionListener： 用于监听用户Session的开始和结束</li>
<li>ServletSessionAttributerListener: 用于监听ServletSession范围（session）内属性的更改</li>
</ul>


<h2>参考</h2>

<p><a href="http://book.douban.com/subject/6002664/">轻量级Java EE企业应用实战</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaEE学习之JSP技术]]></title>
    <link href="http://easypi.github.com/blog/2013/01/11/javaEE-learning-JSP/"/>
    <updated>2013-01-11T17:35:00+08:00</updated>
    <id>http://easypi.github.com/blog/2013/01/11/javaEE-learning-JSP</id>
    <content type="html"><![CDATA[<p>JSP(Java Server Page)与Servlet是JavaEE的基本成员，基本形式为在HTMl文件中添加Java代码，辅以使用JSP标签，在静态的HTML的基础上有了动态提供页面内容的能力，使从事java开发的人员可以将java知识运用到动态网页开发的应用中。</p>

<p>本文是JavaEE学习笔记的第一篇，以一个简单的使用JSP的web应用来开始JaveEE技术的学习，并且说明JSP与Servlet类之间的联系和工作原理，最后还总结了一些包括脚本语法、编译和动作指令、内置Servlet对象、和自定义标签等一些具体的JSP的技术。</p>

<!-- more -->


<h2>Hello JSP！</h2>

<p>首先看一个简单的基于JSP的动态网页应用，在Eclipse中新建一个Dynamic Web Project，在WebContent文件夹下新建一JSP文件：Hello.jsp</p>

<pre><code>&lt;%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
&lt;title&gt; 欢迎&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
欢迎学习javaEE知识，现在时间是&lt;br/&gt;
&lt;%out.println(new java.util.Date()); %&gt; &lt;br/&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>其中第一行用<code>&lt;%@ %&gt;</code>包起来的内容为JSP的编译指令，用来定义说明JSP文件的一些基本信息。该行之下就是一个普通的HTML文件，只是其中有一行用<code>&lt;% %&gt;</code>包起来，这表明其中的内容为java代码，该行用来输出当前的时间。将该工程部署到tomcat服务器上访问该JSP文件能够得到期望输出。由此可知，JSP技术可以概括为两者的结合：一为HTML技术，用来实现网页静态内容的显示; 二为java技术，用来实现动态内容的处理。JSP技术通过将两者结合在一起实现了动态网页的设计。在表面上，作为表现层技术，按照其语法约定编写JSP程序即可实现设计的需要; 本质上，JSP依靠Servlet实现。</p>

<h2>JSP 的实现原理</h2>

<p>JSP的本质是Servlet，当用户向指定Servlet发送请求时，Servlet利用动态输出流动态生成HTML页面，包括每一个静态的HTML标签和所有在HTML页面中出现的内容。</p>

<p>为了表明JSP的运行原理，来看一个复杂一点的例子：</p>

<pre><code>&lt;%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
&lt;title&gt; 欢迎&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
欢迎学习javaEE知识，现在时间是&lt;br/&gt;
&lt;%out.println(new java.util.Date()); %&gt;
&lt;br/&gt;
&lt;!-- 在JSP中加入java代码，实现动态 --&gt;
&lt;%
for (int i = 0; i &lt; 5; i++) {
    out.println("&lt;font size='"+i+"'&gt;");
%&gt;
测试字体大小 &lt;/font&gt; &lt;br/&gt;
&lt;% }%&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>在刚才的hello.jsp文件中加入了一个for循环结构来控制输出字体的大小。为了更加清楚的了解JSP的实现原理，需要分析该JSP文件编译而成的Servlet文件，该文件可以在tomcat的work文件夹中找到（如果使用eclipse并将tomcat的项目部署在workspace的.metadata文件夹下，则work不在tomcat目录下，而在.metadata文件夹下）。找到的对应的Hello_jsp.java文件如下</p>

<pre><code>package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Hello_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map&lt;java.lang.String,java.lang.Long&gt; _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map&lt;java.lang.String,java.lang.Long&gt; getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
                null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;\n");
      out.write("&lt;html&gt;\n");
      out.write("&lt;head&gt;\n");
      out.write("&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;\n");
      out.write("&lt;title&gt; 欢迎&lt;/title&gt;\n");
      out.write("&lt;/head&gt;\n");
      out.write("&lt;body&gt;\n");
      out.write("欢迎学习javaEE知识，现在时间是&lt;br/&gt;\n");
out.println(new java.util.Date()); 
      out.write("\n");
      out.write("&lt;br/&gt;\n");
      out.write("\n");
      out.write("&lt;!-- 在JSP中加入java代码，实现动态 --&gt;\n");

for (int i = 0; i &lt; 5; i++) {
    out.println("&lt;font size='"+i+"'&gt;");

      out.write("\n");
      out.write("测试字体大小 &lt;/font&gt; &lt;br/&gt;\n");
 }
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("&lt;/body&gt;\n");
      out.write("&lt;/html&gt;");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null &amp;&amp; out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
</code></pre>

<p>由此java代码可以看出，JSP代码被编译转化成了一个继承自HttpJspBase的类，该类有三个方法<code>_jspInit(), _jspDestroy(), _jspService()</code>,分别实现初始化JSP/Servlet、销毁JSP/Servlet、和响应用户请求。在<code>_jspService()</code>中可以找到对应于上述JSP代码的实现：对于静态的HTML代码，调用<code>out.write()</code>方法直接输出; 对于java代码，则直接以原始形式存在与该方法内，用来动态实现要求。</p>

<p>通过该例可知，JSP被编译成了一个Servlet的类来实现设计要求，本质上还是Servlet，实际上还是运行了Servlet类的方法，因此编写JSP或者直接编写Servlet代码本质上是一样的。但是由于直接编写Servlet代码比较麻烦，开发实现慢，相比而言开发JSP代码则方便很多,能够大大提高动态网站的开发效率。需要注意的是，JSP代码向Servlet代码转化过程中由于存在编译转化的过程，因此每个JSP页面的第一次访问会比较慢。</p>

<h2>JSP的具体技术</h2>

<h3>JSP注释语法</h3>

<p>JSP的注释语法为：</p>

<pre><code>&lt;%-- JSP注释内容 --%&gt; 
</code></pre>

<h3>JSP声明</h3>

<p>在JSP文件中的声明内容将会被转换为相应Servlet的成员变量和成员方法，符合java语法。JSP的声明语法为</p>

<pre><code>&lt;%! 声明内容 %&gt;
</code></pre>

<h3>JSP输出表达式</h3>

<p>使用JSP的输出表达式可以代替<code>out.println()</code>语句，注意<em>输出表达式语法内不能有分号</em>。其语法为：</p>

<pre><code>&lt;%= 输出内容 %&gt;
</code></pre>

<h3>JSP脚本</h3>

<p>使用JSP脚本语法可以方便的将java代码嵌入到HTML中，实现动态功能。其语法为：</p>

<pre><code>&lt;% 脚本内容 %&gt;
</code></pre>

<h3>JSP编译指令</h3>

<p>JSP编译指令是通知JSP引擎的信息，不直接产生输出且都有默认值，因此无需为每个指令赋值。其语法为：</p>

<pre><code>&lt;%@ 指令名 属性名="属性值"%&gt;
</code></pre>

<p>常见的编译指令有<code>page，include，taglib</code>三个：</p>

<ul>
<li>page: 通常位于JSP顶端，有<code>language, extends, import, session, buffer, autoFlush, info, errorPage, isErrorPage, contentType, pageEncoding</code>等属性，用来说明语言、继承父类、导入包等。</li>
<li>include: 实现静态导入外部文件的功能，能将外部文件嵌入到该文件并且解析其JSP语句。该导入会将目标页面的其他编译指令导入，如果与本页编译指令冲突则会报错。还可以通过JSP的动作指令<code>&lt;jsp:include&gt;</code>实现动态导入，不会导入目标页面的其他编译指令。</li>
<li>taglib: 用于访问和定义自己的标签库。</li>
</ul>


<h3>JSP动作指令</h3>

<p>JSP动作指令是运行时的动作，是JSP脚本的标准化写法。其语法为：</p>

<pre><code>&lt;指令名  属性名="属性值" /&gt;
</code></pre>

<p>常用的动作指令有：</p>

<ul>
<li>jsp:forward: 用于将页面响应转发到另外的界面</li>
<li>jsp:param: 用于传递参数，需与其他支持参数的标签一起使用</li>
<li>jsp:include: 用于动态引入另一个JSP页面</li>
<li>jsp:plugin: 用于下载javaBean或Applet到客户端执行</li>
<li>jsp:useBean: 创建一个javaBean实例</li>
<li>jsp:setProperty: 设置javaBean实例的属性</li>
<li>jsp:getProperty: 获得javaBean实例的属性</li>
</ul>


<h3>JSP脚本的内置对象</h3>

<p>JSP脚本中有9个内置对象，是Servlet API接口的实例，可以直接使用。</p>

<ul>
<li>application： java.servlet.ServletContext的实例，代表JSP所属web应用本身。</li>
<li>config：java.servlet.ServletConfig的实例，代表该JSP的配置信息。</li>
<li>exception: java.lang.Throwable的实例，该实例代表其它页面的异常和错误，只对errorPage才可使用。</li>
<li>out： javax.servlet.jsp.JspWriter的实例，代表JSP页面的输出流，用于形成HTML页面</li>
<li>page: java.lang.Object的实例，代表该页面本身，就是该Servlet的this。</li>
<li>pageContext: javax.servlet.jsp.PageContext的实例，代表该JSP页面上下文，可用此访问页面中的共享数据。</li>
<li>request: javax.servlet.http.HttpServletRequest的实例，代表客户端的一次请求，所有请求参数都在此对象中。</li>
<li>response: javax.servlet.http.HttpServletResponse的实例，代表服务器对客户端的响应，常用与重定向。</li>
<li>session: javax.servlet.http.HttpSession的实例，代表一次会话。</li>
</ul>


<p>有上述的java代码可以看出，其中request和response是<code>_jspService()</code>的形参，而其他对象都在该方法内创建，为该方法的局部变量，因此在JSP脚本中可直接使用，不需再次声明。<code>_jspService()</code>方法用来完成解析客户端请求数据、处理客户请求、和生成响应数据的工作。但是由于JSP和Servlet等通常有web服务器进行调用，二者之间并不互相调用，为了实现二者之间的数据交换，web服务器定义了四个类似map的结构充当中介的角色，实现二者之间的数据交换。这四个结构根据范围由大到小依次是<code>application &gt; session &gt; request &gt; page</code>：</p>

<ul>
<li>application: 对整个web应用有效，其中的数据可被该应用下的JSP和Servlet访问。</li>
<li>session: 对一次会话有效，其中的数据可被该次会话中是JSP和Servlet访问</li>
<li>request: 对一次请求有效，其中的数据可被该次请求中是JSP和Servlet访问</li>
<li>page: 只对当前页面有效，其中的数据可以被该JSP页面的脚本，声明中访问。</li>
</ul>


<p>对于客户端发送的请求，其请求参数有GET和POST两种方式。二者之间存在一些差异：</p>

<ul>
<li>GET: 两种情况下使用该类方式请求，一是直接在浏览器地址栏输入访问地址时，二是提交表单时form元素的method属性为设置或设为get时。该类请求参数的名和值会被转换为字符串附加于地址之后，用户可以看到，且传送数据量较小。</li>
<li>POST: 提交表单的form元素的method属性设为post时使用该类方式请求。在地址栏看不到请求参数值，传送数量较大。</li>
</ul>


<p>对于请求的传递，会用到转发（forward）和重定向（redirect）两种方式。二者的差异为：</p>

<ul>
<li>执行forward仍然为该次请求，而redirect则生成第二次请求。</li>
<li>由于是同一次请求，forward的请求参数保留且不变; redirect则不同，生成的新的请求不会保留上次请求的参数。</li>
<li>forward处理浏览器的地址栏不会变化，redirect则会改为重定向的目标URL，与在地址栏输入新URL回车效果相同。</li>
</ul>


<h3>JSP的自定义标签</h3>

<p>通过使用JSP的自定义标签库规范，可以扩展JSP的标签，将复杂的功能封装在简单的标签内，提高开发效率。使用该技术主要分三步：</p>

<ul>
<li>开发自定义标签处理类: 该类继承自javax.servlet.jsp.tagext.SimpleTagSupport, 通过重写doTag()方法实现功能。</li>
<li>建立TLD（Tag Library Definition）文件实现标签名与标签处理类的关联。</li>
<li>在JSP文件中，通过编译指令指明使用的标签库，即可在JSP中使用自定义的标签。</li>
</ul>


<h2>参考</h2>

<p><a href="http://book.douban.com/subject/6002664/">轻量级Java EE企业应用实战</a></p>
]]></content>
  </entry>
  
</feed>
